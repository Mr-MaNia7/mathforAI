# -*- coding: utf-8 -*-
"""Face Recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rBe2Kx-AB5zfSzsW1B0o5hojTteukbtA
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from numpy.linalg import svd
from numpy.linalg import eig

def convert_image_to_nparray(df):
  facematrix = df.drop('784', axis = 1).to_numpy()
  return facematrix

def find_mean_face(df):
  df_d = df.drop('784', axis = 1)
  mean_face = df_d.mean(axis = 0)
  return mean_face

def normalize(face_matrix, mean_face):
  
  X = face_matrix - mean_face
  return X

def find_covariance(normalized):
  cov = normalized@np.transpose(normalized)
  return cov

def eigen_decomposition(cov):
  #calculate eigenvalues and eigenvectors for the covariance
  eigen_values, eigen_vectors = eig(cov)
  
  return (eigen_values, eigen_vectors)

def dimension_reduction(eig_val, eig_vec, k):
  sorted_index = np.argsort(eig_val)[::-1]
  sorted_eigenvectors = eig_vec[:, sorted_index]
  reduced_eigenvectors = sorted_eigenvectors[:, 0:k]
  return reduced_eigenvectors



df = pd.read_csv('FACE_DATA_SHUFFLED_.csv')
df.head()

mean_face = find_mean_face(df)
mean_face = np.array(mean_face, dtype = float)
print(mean_face)
len(mean_face)

plt.imshow(mean_face.reshape(28, 28), cmap = 'gray')

face_matrix = convert_image_to_nparray(df)
normalized = normalize(face_matrix, mean_face)
# print(len(normalized))

for i in range(len(normalized)):
  face = normalized[i].reshape(28, 28)
  plt.imshow(face, cmap = 'gray')
  plt.show()

covariance = find_covariance(normalized)
covariance

eigen_values, eigen_vectors = eigen_decomposition(covariance)
print(eigen_values)
print(eigen_vectors)

print(len(eigen_values))

reduced = dimension_reduction(eigen_values, eigen_vectors, 50)
# eigen_faces = np.transpose(eigen_faces)
print(len(reduced[0]))

print(reduced.shape)
print(normalized.shape)

reduced_t = np.transpose(reduced)
reduced_t.shape

eigen_faces = reduced_t@normalized
eigen_faces

fig, axes = plt.subplots(4,4,sharex=True,sharey=True,figsize=(8,10))
for i in range(16):
    axes[i%4][i//4].imshow(eigen_faces[i].reshape(28, 28), cmap="gray")
plt.show()

print(eigen_faces.shape)
print(normalized.shape)

weights = (normalized).dot(np.transpose(eigen_faces))
weights

"""#**TRYING TO RECOGNOZE THE FACES**"""

from google.colab import drive
drive.mount('/gdrive')

import cv2
query = '/gdrive/MyDrive/FACE_DATA/s2/2.pgm'
img =  cv2.imread(query,0)
image = (cv2.resize(img, (28, 28))).reshape(784)
image = image.reshape(1, -1)
print(image)

normalized_test = image - mean_face
face = normalized_test.reshape(28, 28)
plt.imshow(face, cmap = 'gray')
plt.show()

print(normalized_test.shape)
print(eigen_faces.shape)

test_weights = normalized_test@(np.transpose(eigen_faces))
test_weights

print(test_weights.shape)
print(weights.shape)

euclidean_distance = np.linalg.norm(weights - test_weights, axis=0)
best_match = np.argmin(euclidean_distance)
print(best_match)

fig, axes = plt.subplots(1,2,sharex=True,sharey=True,figsize=(8,6))
axes[0].imshow(image.reshape(28, 28), cmap="gray")
axes[0].set_title("Query")
axes[1].imshow(face_matrix[best_match-1].reshape(28, 28), cmap="gray")
axes[1].set_title("Best match")
plt.show()